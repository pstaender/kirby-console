#!/usr/bin/env php
<?php
$kirbyBootstrap = getcwd() . '/kirby/bootstrap.php';
if (!file_exists($kirbyBootstrap)) {
    echo "Couldn't find the kirby bootstrap file. Are you inside a valid kirby project? Missing file: $kirbyBootstrap \n";
    exit(1);
}

require getcwd() . '/kirby/bootstrap.php';

$homedir = $_SERVER['HOME'] ?? getenv('HOME');

if (file_exists($homedir . '/.composer/vendor/autoload.php')) {
    // if is used from global composer installation
    require $homedir . '/.composer/vendor/autoload.php';
} elseif (file_exists($homedir . '/.config/composer/vendor/autoload.php')) {
    require $homedir . '/.config/composer/vendor/autoload.php';
} elseif (file_exists(getcwd() . '/vendor/autoload.php')) {
    // called from kirby project
    require getcwd() . '/vendor/autoload.php';
}

if (php_sapi_name() !== 'cli') {
    exit('This script can only be executed on cli');
}

$writeExitStatusToFile = '';
$displayStartupMessage = true;

$kirby = new Kirby();

function displayConsoleHelp()
{
    $usage = "Usage: kconsole [user] [switches…]\n";
    $cmds = [
        '-h --help' => 'displays help',
        '--write-exit-status-to-file' =>
            'this internal option is required to label a restart (for kconsole)',
    ];
    $maxLength = max(
        array_map(function ($v) {
            return strlen($v);
        }, array_keys($cmds))
    );
    echo $usage . "\nSwitches:\n\n";
    foreach ($cmds as $switch => $description) {
        echo str_pad($switch, $maxLength + 3) . $description . "\n";
    }
    echo "\n";
}

// display help and exit?
foreach ($argv as $arg) {
    if ($arg === '-h' || $arg === '--help') {
        displayConsoleHelp();
        exit();
    }
    if (str_starts_with($arg, '--write-exit-status-to-file=')) {
        $writeExitStatusToFile = explode('=', $arg)[1];
    }
    if ($arg === '--no-startup-message') {
        $displayStartupMessage = false;
    }
}

$startupMessage = 'Kirby v' . kirby()->version();

$email = $argv[1] ?? '';
if (!empty($email) && $email[0] !== '-') {
    $kirby->impersonate($email);
    $startupMessage .= ' – ' . kirby()->user()->email();
} else {
    $email = '';
}

Zeitpulse\KirbyInteractiveShell\Shell::shell(
    [
        'startupMessage' => $displayStartupMessage ? $startupMessage : null,
    ],
    impersonate: $email,
    writeExitStatusToFile: $writeExitStatusToFile
)->run();

